name: Version Control

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    types: [closed]
    branches:
      - main
      - develop

jobs:
  version:
    runs-on: ubuntu-latest
    if: |
      !contains(github.event.head_commit.message, 'chore(release)') &&
      (github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true))
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry commitizen
          curl -L https://github.com/rust-lang/rust-analyzer/releases/latest/download/rust-analyzer-x86_64-unknown-linux-gnu.gz | gunzip -c - > /usr/local/bin/rust-analyzer
          chmod +x /usr/local/bin/rust-analyzer
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source "$HOME/.cargo/env"
          cargo install git-cliff
      
      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
      
      - name: Check for first release
        id: check_first
        run: |
          if ! git describe --tags --abbrev=0 2>/dev/null; then
            echo "first_release=true" >> $GITHUB_OUTPUT
          else
            echo "first_release=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Determine version bump
        id: bump
        run: |
          if [[ "${{ steps.check_first.outputs.first_release }}" == "true" ]]; then
            echo "bump=first" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          LAST_TAG=$(git describe --tags --abbrev=0)
          COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"%s")
          
          if [[ -z "$COMMITS" ]]; then
            echo "No new commits since last tag"
            exit 0
          fi
          
          # Check for breaking changes
          if echo "$COMMITS" | grep -qE "^(BREAKING CHANGE:|feat!:|fix!:|refactor!:)"; then
            echo "bump=major" >> $GITHUB_OUTPUT
          # Check for features
          elif echo "$COMMITS" | grep -q "^feat:"; then
            echo "bump=minor" >> $GITHUB_OUTPUT
          # Check for specific patch commits
          elif echo "$COMMITS" | grep -qE "^(fix:|docs:|style:|refactor:|perf:|test:|chore:)"; then
            echo "bump=patch" >> $GITHUB_OUTPUT
          else
            echo "bump=none" >> $GITHUB_OUTPUT
          fi
      
      - name: Bump version
        if: steps.bump.outputs.bump != 'none'
        run: |
          if [[ "${{ steps.check_first.outputs.first_release }}" == "true" ]]; then
            poetry version 0.1.0
          else
            case "${{ steps.bump.outputs.bump }}" in
              "major") poetry version major ;;
              "minor") poetry version minor ;;
              "patch") poetry version patch ;;
            esac
          fi
          
          NEW_VERSION=$(poetry version -s)
          echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV
          
          # Update version in other files if needed
          if [[ -f "src/__init__.py" ]]; then
            echo "__version__ = \"${NEW_VERSION}\"" > src/__init__.py
          fi
      
      - name: Generate changelog
        if: steps.bump.outputs.bump != 'none'
        run: |
          git-cliff --output CHANGELOG.md
          
          # Ensure CHANGELOG.md exists
          if [[ ! -f CHANGELOG.md ]]; then
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "## [${NEW_VERSION}] - $(date +%Y-%m-%d)" >> CHANGELOG.md
          fi
      
      - name: Commit changes
        if: steps.bump.outputs.bump != 'none'
        run: |
          git add pyproject.toml CHANGELOG.md
          if [[ -f "src/__init__.py" ]]; then
            git add src/__init__.py
          fi
          
          git commit -m "chore(release): bump version to ${NEW_VERSION}"
          git tag -a "v${NEW_VERSION}" -m "Release version ${NEW_VERSION}"
      
      - name: Verify changes
        if: steps.bump.outputs.bump != 'none'
        run: |
          if ! git diff --quiet; then
            echo "Unexpected changes detected"
            git status
            git diff
            exit 1
          fi
      
      - name: Push changes
        if: steps.bump.outputs.bump != 'none'
        continue-on-error: true
        run: |
          git push || {
            echo "Failed to push changes. Fetching latest changes and retrying..."
            git fetch
            git rebase origin/$(git branch --show-current)
            git push
          } 