name: Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Validate tag format
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          if ! [[ $TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\.]+)?(\+[a-zA-Z0-9\.]+)?$ ]]; then
            echo "Invalid tag format: $TAG"
            echo "Tag must follow semantic versioning: v1.2.3, v1.2.3-beta.1, etc."
            exit 1
          fi
  
  test:
    needs: validate
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install
      
      - name: Run tests
        run: |
          poetry run pytest
  
  release:
    needs: [validate, test]
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry build twine
      
      - name: Verify version match
        run: |
          TAG=${GITHUB_REF#refs/tags/v}
          POETRY_VERSION=$(poetry version -s)
          INIT_VERSION=$(python -c "from git_scope import __version__; print(__version__)")
          
          if [ "$TAG" != "$POETRY_VERSION" ] || [ "$TAG" != "$INIT_VERSION" ]; then
            echo "Version mismatch:"
            echo "Tag version: $TAG"
            echo "Poetry version: $POETRY_VERSION"
            echo "Init version: $INIT_VERSION"
            exit 1
          fi
      
      - name: Build package
        run: |
          poetry build
          
          # Validate built artifacts
          if [ ! -f "dist/"*.whl ] || [ ! -f "dist/"*.tar.gz ]; then
            echo "Build artifacts are missing"
            exit 1
          fi
      
      - name: Check package
        run: |
          twine check dist/*
      
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*.whl
            dist/*.tar.gz
          body_path: CHANGELOG.md
          draft: false
          prerelease: ${{ contains(github.ref, '-') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Publish to Test PyPI
        if: success()
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.TEST_PYPI_TOKEN }}
        run: |
          poetry config repositories.testpypi https://test.pypi.org/legacy/
          poetry publish -r testpypi
      
      - name: Verify Test PyPI package
        if: success()
        run: |
          # Wait for package to be available
          sleep 60
          
          # Create new virtual environment
          python -m venv test_env
          source test_env/bin/activate
          
          # Install from Test PyPI
          pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple git-scope==${GITHUB_REF#refs/tags/v}
          
          # Basic import test
          python -c "import git_scope; print(git_scope.__version__)"
      
      - name: Publish to PyPI
        if: success()
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
        run: |
          poetry publish
      
      - name: Update documentation
        if: success()
        run: |
          npm install -g mintlify@latest
          
          # Validate documentation
          mintlify verify
          
          # Build documentation
          mintlify build
          
          # Deploy to Mintlify
          mintlify deploy
        env:
          MINTLIFY_TOKEN: ${{ secrets.MINTLIFY_TOKEN }}
      
      - name: Notify team
        if: always()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: 'releases'
          slack-message: |
            Release Status: ${{ job.status }}
            Version: ${{ github.ref_name }}
            ${{ job.status == 'success' && 'üöÄ Release successful!' || '‚ùå Release failed!' }}
            ${{ job.status == 'success' && format('Release notes: {0}', steps.create_release.outputs.url) || '' }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }} 